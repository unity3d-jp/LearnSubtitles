1
00:00:00,276 --> 00:00:02,790
変数のスコープとは

2
00:00:02,790 --> 00:00:04,692
変数が有効なコード内における範囲のことです。

3
00:00:04,692 --> 00:00:06,692
コード内でスコープの中にある変数のことを

4
00:00:06,692 --> 00:00:08,692
ローカル変数と呼びます。

5
00:00:08,692 --> 00:00:10,692
コード群は一般的に、変数のスコープを

6
00:00:10,692 --> 00:00:12,692
定義するもので、それらは中括弧によって

7
00:00:12,692 --> 00:00:13,921
示されます。

8
00:00:14,421 --> 00:00:16,352
例えば、例示されているクラスの

9
00:00:16,352 --> 00:00:18,352
中にあるものは全て、ローカルである

10
00:00:18,352 --> 00:00:20,088
と言うことができます。

11
00:00:20,562 --> 00:00:24,383
pens、crayons、answer 変数は全て

12
00:00:24,383 --> 00:00:26,956
Example 関数のローカルであり、

13
00:00:26,956 --> 00:00:28,776
関数の外側で使用することはできません。

14
00:00:29,263 --> 00:00:30,727
alpha、beta、gamma 変数は

15
00:00:30,727 --> 00:00:33,556
ScopeAndModifiersクラスの

16
00:00:33,556 --> 00:00:36,199
スコープにあると言えます。

17
00:00:36,575 --> 00:00:38,575
そして、pens、crayons、answer 変数は

18
00:00:38,575 --> 00:00:40,879
Example 関数のスコープ

19
00:00:40,879 --> 00:00:42,879
にあると言えます。

20
00:00:43,945 --> 00:00:46,337
Public Private アクセス修飾子

21
00:00:46,680 --> 00:00:48,680
クラスで定義された変数は

22
00:00:48,680 --> 00:00:50,680
関数内で宣言されたものとは違って

23
00:00:50,680 --> 00:00:52,680
アクセス修飾子の特質を持っている

24
00:00:52,680 --> 00:00:55,581
アクセス修飾子というのは、変数を宣言する時に

25
00:00:55,581 --> 00:00:58,657
データ型の前に書くキーワードで、

26
00:00:58,657 --> 00:01:00,657
変数や関数がどこから閲覧できるか

27
00:01:00,657 --> 00:01:02,657
を定義するためにあります。

28
00:01:02,936 --> 00:01:05,616
一般的には、他のスクリプトが変数や関数に

29
00:01:05,616 --> 00:01:07,616
アクセスする必要がある時には public を、

30
00:01:07,616 --> 00:01:10,440
そうで無い時は private にしておくべきです。

31
00:01:10,940 --> 00:01:12,731
public として変数を宣言するのは

32
00:01:12,731 --> 00:01:15,325
クラスの外側からアクセスできる、ということを意味します。

33
00:01:15,325 --> 00:01:17,325
そして、変数が Inspecter のコンポーネント

34
00:01:17,325 --> 00:01:20,070
に表示され、編集もできるということも意味します。

35
00:01:20,070 --> 00:01:22,455
この例では、

36
00:01:22,455 --> 00:01:24,455
ScopeAndAccesModifiersスクリプトは

37
00:01:24,455 --> 00:01:26,455
prop_samoflange オブジェクトに適用されており、

38
00:01:26,455 --> 00:01:28,455
public 変数 alpha が編集可能なプロパティとして

39
00:01:28,455 --> 00:01:31,336
スクリプトに含まれていることが見て取れます。

40
00:01:31,336 --> 00:01:33,573
このことによって、ユーザーがゲームをテストしている

41
00:01:33,573 --> 00:01:35,211
間に変数を編集することができます。

42
00:01:35,211 --> 00:01:37,211
例えば、車の速度を調節する

43
00:01:37,211 --> 00:01:39,447
値があるとします。それがあれば

44
00:01:39,447 --> 00:01:41,071
ゲームを停止し、スクリプトを変更してから

45
00:01:41,071 --> 00:01:43,196
やり直さなくてもテスト中にその変数を

46
00:01:43,196 --> 00:01:45,196
調節できるので便利でしょう。そのように、

47
00:01:45,196 --> 00:01:47,196
public 変数を持つというのは理にかなった

48
00:01:47,196 --> 00:01:49,196
ことなのです。変数がクラス内で

49
00:01:49,196 --> 00:01:51,196
初期値に初期化された場合に

50
00:01:51,196 --> 00:01:53,980
注意してください。例えば、alphaの値を

51
00:01:53,980 --> 00:01:55,980
5に設定したとしても、

52
00:01:55,980 --> 00:01:57,980
Inspector に記述された値に

53
00:01:57,980 --> 00:01:59,980
上書きされたままになります。

54
00:01:59,980 --> 00:02:02,063
しかし、もしこれらの値が

55
00:02:02,063 --> 00:02:04,315
Inspector で設定された後に

56
00:02:04,315 --> 00:02:06,315
Start や Awake といった関数で設定されたら

57
00:02:06,315 --> 00:02:08,789
Inspectorの値には上書きされません。

58
00:02:08,789 --> 00:02:11,584
例えば、スクリプトが初期値に5を

59
00:02:11,584 --> 00:02:13,584
設定されていたとしたのに、

60
00:02:13,584 --> 00:02:16,335
Inspector によって上書きされたものを

61
00:02:16,335 --> 00:02:18,648
Start関数内で手動で設定すると、

62
00:02:19,328 --> 00:02:22,299
Inspectorの値を上書きします。

63
00:02:25,327 --> 00:02:27,327
Now given that the game is at runtime

64
00:02:27,327 --> 00:02:29,327
if I tweak the value again

65
00:02:29,327 --> 00:02:31,258
that's now overriding the script again.

66
00:02:31,537 --> 00:02:33,412
So bear in mind that even though the

67
00:02:33,412 --> 00:02:35,799
public variable is tweakable on the

68
00:02:35,799 --> 00:02:37,367
component it doesn't mean that you can't 

69
00:02:37,367 --> 00:02:39,090
go back and edit it via a script during

70
00:02:39,090 --> 00:02:40,280
during runtime. 

71
00:02:40,545 --> 00:02:42,880
Private variables can only be edited from

72
00:02:42,880 --> 00:02:46,025
within the class. In C# private is the

73
00:02:46,025 --> 00:02:48,025
default access modifier for any

74
00:02:48,025 --> 00:02:50,025
variable that doesn't have it specified.

75
00:02:50,318 --> 00:02:52,318
So although I've written private on 

76
00:02:52,318 --> 00:02:55,150
beta and gamma, if I hadn't they would be 

77
00:02:55,150 --> 00:02:57,150
private regardless. It's good practice

78
00:02:57,150 --> 00:02:59,811
to make all member variables, those that belong

79
00:02:59,811 --> 00:03:01,811
to a class rather than a function,

80
00:03:01,811 --> 00:03:03,811
private, unless they need to be public

81
00:03:03,811 --> 00:03:05,112
for a specific reason.

82
00:03:05,112 --> 00:03:07,609
Setting variables and functions to public

83
00:03:07,609 --> 00:03:09,609
can also mean that you can access them from

84
00:03:09,609 --> 00:03:12,160
other scripts. So for example I have

85
00:03:12,160 --> 00:03:15,025
another class here which has 2 functions in,

86
00:03:15,025 --> 00:03:17,025
a public function called FruitMachine

87
00:03:17,025 --> 00:03:19,636
and a private called OfficeSort.

88
00:03:19,832 --> 00:03:21,832
And I have some public variables and

89
00:03:21,832 --> 00:03:23,832
some private variables. Back in my original

90
00:03:23,832 --> 00:03:27,032
script I can call only the public 

91
00:03:27,032 --> 00:03:28,628
members of that script.

92
00:03:28,948 --> 00:03:32,359
For example, if I were to create

93
00:03:32,359 --> 00:03:34,359
an instance of the class

94
00:03:34,359 --> 00:03:36,359
AnotherClass, and you can see that when I

95
00:03:36,359 --> 00:03:37,820
try and access this the 

96
00:03:37,820 --> 00:03:40,703
apples and banana variables as well as 

97
00:03:40,703 --> 00:03:42,452
FruitMachine are available,

98
00:03:42,452 --> 00:03:44,866
and you can see that in telesense in MonoDevelop

99
00:03:44,866 --> 00:03:46,533
is telling me that I can use these.

100
00:03:46,533 --> 00:03:48,533
So when I choose FruitMachine and open the

101
00:03:48,533 --> 00:03:50,533
the bracket it's then telling me what

102
00:03:50,533 --> 00:03:52,533
arguments need to be fed in to that.

103
00:03:52,533 --> 00:03:54,782
And I can feed in any of the variables

104
00:03:54,782 --> 00:03:56,782
that are in scope of this script, or

105
00:03:56,782 --> 00:03:59,185
that are in scope of AnotherClass

106
00:03:59,185 --> 00:04:00,629
because they are public.

107
00:04:01,322 --> 00:04:03,322
So I could use any of the variables

108
00:04:03,322 --> 00:04:05,826
from my scope and access modifiers class

109
00:04:05,826 --> 00:04:07,826
and I can access the instance of another

110
00:04:07,826 --> 00:04:09,826
class and make use of a public variable

111
00:04:09,826 --> 00:04:12,344
from there, such as apples for example.

112
00:04:12,609 --> 00:04:14,609
Note that because the OfficeSort

113
00:04:14,609 --> 00:04:16,609
and stapler and sellotape are all

114
00:04:16,609 --> 00:04:19,446
private I can't access them by creating

115
00:04:19,446 --> 00:04:21,446
an instance of another class. 

116
00:04:21,446 --> 00:04:24,574
They're for use only within the class itself.
